#include <vector>
#include <algorithm>

template<typename T>
class bucket_allocator
{
public:
	using value_type = T;
	using pointer = T*;
	using void_pointer = void*;
	using const_void_pointer = const void*;
	using difference_type = decltype(std::declval<T*>() - std::declval<T*>());
	struct bucket
	{
		void* adress;
		std::size_t size, countAllocated, countDeallocated;
	};
	std::vector<bucket> buckets;
	const size_t threshold_size = 1024;
	bucket_allocator() {}
	bucket_allocator(size_t threshold_size) : threshold_size(threshold_size) {}
	bucket_allocator(const bucket_allocator& other) = delete;
	bucket_allocator& operator=(const bucket_allocator& other) = delete;
	~bucket_allocator() = default;

	pointer allocate(std::size_t n)
	{
		for (bucket& x : buckets)
		{
			if (x.size - x.countAllocated >= n)
			{
				pointer temp = (pointer)x.adress + x.countAllocated;
				x.countAllocated += n;
				return temp;
			}
		}
		buckets.push_back(bucket());
		std::size_t temp = std::max(n, threshold_size);
		buckets.back().adress = operator new[] (temp * sizeof(value_type));
		buckets.back().size = temp;
		buckets.back().countAllocated = n;
		buckets.back().countDeallocated = 0;
		return (pointer)buckets.back().adress;
	}

	void deallocate(pointer ptr, std::size_t n)
	{
		for (auto x = buckets.begin(); x < buckets.end(); x++)
		{
			if (ptr >= (pointer)x->adress && ptr < (pointer)x->adress + x->size)
			{
				x->countDeallocated += n;
				if (x->countDeallocated == x->countAllocated)
				{
					operator delete[] (x->adress);
					buckets.erase(x);
				}
                break;
			}
		}
	}
};

template<typename T, typename U>
constexpr bool operator== (const bucket_allocator<T>&, const bucket_allocator<U>&) noexcept
{
	return true;
}

template<typename T, typename U>
constexpr bool operator!= (const bucket_allocator<T>&, const bucket_allocator<U>&) noexcept
{
	return false;
}
